#define PID_KP  1.0f
#define PID_KI  0.25f
#define PID_KD  0.125f
#define PID_TAU 0.02f
#define PID_LIM_MIN -50.0f
#define PID_LIM_MAX  50.0f
#define PID_LIM_MIN_INT -5.0f
#define PID_LIM_MAX_INT  5.0f

#define SAMPLE_TIME_S 0.25f

double target = 50.0; // Desired temperature
double temperature; 
float temperature_curve[] = {51.03,51.25,51.47,51.69,51.91,52.13,52.35,52.58,52.80,53.03,53.25,53.48,53.71,53.93,54.16,54.39,54.62,54.86,55.09,55.32,55.55,55.79,56.02,56.26,56.50,56.73,56.97,57.21,57.45,57.69,57.93,58.17,58.41,58.66,58.90,59.14,59.39,59.63,59.88,60.12,60.37,60.62,60.87,61.11,61.36,61.61,61.86,62.11,62.36,62.61,62.87,63.12,63.37,63.62,63.88,64.13,64.39,64.64,64.89,65.15,65.41,65.66,65.92,66.17,66.43,66.69,66.95,67.20,67.46,67.72,67.98,68.24,68.50,68.75,69.01,69.27,69.53,69.79,70.05,70.31,70.57,70.83,71.09,71.35,71.61,71.87,72.13,72.39,72.65,72.91,73.17,73.43,73.69,73.95,74.21,74.47,74.73,74.99,75.25,75.50,75.76,76.02,76.28,76.54,76.80,77.05,77.31,77.57,77.83,78.08,78.34,78.59,78.85,79.11,79.36,79.61,79.87,80.12,80.38,80.63,80.88,81.13,81.39,81.64,81.89,82.14,82.39,82.64,82.89,83.13,83.38,83.63,83.88,84.12,84.37,84.61,84.86,85.10,85.34,85.59,85.83,86.07,86.31,86.55,86.79,87.03,87.27,87.50,87.74,87.98,88.21,88.45,88.68,88.91,89.14,89.38,89.61,89.84,90.07,90.29,90.52,90.75,90.97,91.20,91.42,91.65,91.87,92.09,92.31,92.53,92.75,92.97,130.90,130.96,131.01,131.07,131.12,131.18,131.23,131.29,131.34,131.40,131.46,131.51,131.57,131.63,131.68,131.74,131.80,131.86,131.92,131.98,132.04,132.10,132.16,132.22,132.28,132.34,132.40,132.46,132.52,132.58,132.65,132.71,132.77,132.83,132.90,132.96,133.02,133.09,133.15,133.22,133.28,133.35,133.41,133.48,133.54,133.61,133.68,133.74,133.81,133.88,133.95,134.01,134.08,134.15,134.22,134.29,134.36,134.42,134.49,134.56,134.63,134.70,134.77,134.84,134.91,134.98,135.06,135.13,135.20,135.27,135.34,135.41,135.49,135.56,135.63,135.70,135.78,135.85,135.92,136.00,136.07,136.14,136.22,136.29,136.37,136.44,136.52,136.59,136.66,136.74,136.81,136.89,136.97,137.04,137.12,137.19,137.27,137.34,137.42,137.50,137.57,137.65,137.73,137.80,137.88,137.96,138.03,138.11,138.19,138.26,138.34,138.42,138.49,138.57,138.65,138.73,138.80,138.88,138.96,139.04,139.11,139.19,139.27,139.35,139.42,139.50,139.58,139.65,139.73,139.81,139.89,139.96,140.04,140.12,140.20,140.27,140.35,140.43,140.51,140.58,140.66,140.74,140.81,140.89,140.97,141.04,141.12,141.20,141.27,141.35,141.43,141.50,141.58,141.66,141.73,141.81,141.88,141.96,142.03,142.11,142.19,142.26,142.34,142.41,142.48,142.56,142.63,142.71,142.78,142.86,142.93,143.00,143.08,143.15,143.22,143.30,143.37,143.44,143.51,143.59,143.66,143.73,143.80,143.87,143.94,144.02,144.09,144.16,144.23,144.30,144.37,144.44,144.51,144.58,144.64,144.71,144.78,144.85,144.92,144.99,145.05,145.12,145.19,145.26,145.32,145.39,145.46,145.52,145.59,145.65,145.72,145.78,145.85,145.91,145.98,146.04,146.10,146.17,146.23,146.29,146.35,146.42,146.48,146.54,146.60,146.66,146.72,146.78,146.84,146.90,146.96,147.02,147.08,147.14,147.20,147.26,147.32,147.37,147.43,147.49,147.54,147.60,147.66,147.71,147.77,147.82,147.88,147.93,147.99,148.04,148.10,155.00,154.21,153.43,152.64,151.86,151.07,150.29,149.50,148.71,147.93,147.14,146.36,145.57,144.79,144.00,143.21,142.43,141.64,140.86,140.07,139.29,138.50,137.71,136.93,136.14,135.36,134.57,133.79,133.00,132.21,131.43,130.64,129.86,129.07,128.29,127.50,126.71,125.93,125.14,124.36,123.57,122.79,122.00,121.21,120.43,119.64,118.86,118.07,117.29,116.50,115.71,114.93,114.14,113.36,112.57,111.79,111.00,110.21,109.43,108.64,107.86,107.07,106.29,105.50,104.71,103.93,103.14,102.36,101.57,100.79,100.00,100.00,90.00,80.00,70.00,60.00,50.00,40.00,30.00,20.00,10.00,0.00,};

typedef struct {
  /* Controller gains */
  float Kp;
  float Ki;
  float Kd;

  /* Derivative low-pass filter time constant */
  float tau;

  /* Output limits */
  float limMin;
  float limMax;

  /* Integrator limits */
  float limMinInt;
  float limMaxInt;

  /* Sample time (in seconds) */
  float T;

  /* Controller "memory" */
  float integrator;
  float prevError;           /* Required for integrator */
  float differentiator;
  float prevMeasurement;     /* Required for differentiator */

  /* Controller output */
  float out;
} PIDController;

void PIDController_Init(PIDController *pid);
float PIDController_Update(PIDController *pid, float setpoint, float measurement);

int curve_length = sizeof(temperature_curve) / sizeof(temperature_curve[0]);
void PIDController_Init(PIDController *pid) {
  pid->integrator = 0.0f;
  pid->prevError = 0.0f;
  pid->differentiator = 0.0f;
  pid->prevMeasurement = 0.0f;
  pid->out = 0.0f;
}

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
  float error = setpoint - measurement;
  float proportional = pid->Kp * error;

  pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
  if (pid->integrator > pid->limMaxInt) {
    pid->integrator = pid->limMaxInt;
  }
  else if (pid->integrator < pid->limMinInt) {
    pid->integrator = pid->limMinInt;
  }

  pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) +
    (2.0f * pid->tau - pid->T) * pid->differentiator)
    / (2.0f * pid->tau + pid->T);

  pid->out = proportional + pid->integrator + pid->differentiator;
  if (pid->out > pid->limMax) {
    pid->out = pid->limMax;
  }
  else if (pid->out < pid->limMin) {
    pid->out = pid->limMin;
  }

  pid->prevError = error;
  pid->prevMeasurement = measurement;
  return pid->out;
}
